var fs = require('fs');
var path = require('path');
var esprima = require('esprima');
var escodegen = require('escodegen');
var estraverse = require('estraverse');

var params = [
    "models",
    "outputDir",
    "outputFilenameTest",
    "animationCodeTemplate",
    "folder",
    "ModelsDirectory",
    "SpritesDirectory"
];

function getRandomInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min)) + min;
}

var pArgs = [];
process.argv.forEach(function (val, index, array) {
	//console.log(val);
	pArgs.push(val);
});
params.forEach(function(val) {  
  var a = pArgs.indexOf(val);
  eval(pArgs[a] + " = pArgs[a + 1]");
});

var openingHTMLtag = `<!DOCTYPE html><html>`;
var openingHeadtag = `<head>`;
var closingHeadtag = `</head>`;
var openingBodytag = `<body>`;
var closingBodytag = `</body>`;
var closingHTMLtag = `</html>`;

var openingDivtag = `<div>`;
var closingDivtag = `</div>`;

var styles = `
  <style>
	  #animation_container {
		position:absolute;
		margin:auto;
		left:0;right:0;
		top:0;bottom:0;
	  }
	  canvas {
	  	border-style: solid;
	  }
  </style>
`;

var createJSscript = `<script src="https://code.createjs.com/createjs-2015.11.26.min.js"></script>`;
var jqueryJSscript = `<script src="https://code.jquery.com/jquery-3.1.1.slim.min.js"></script>`;
var animationStageHTML = `
	<div>
		<div id="animation_container" style="background-color:rgba(255, 255, 255, 1.00);">
			<canvas id="canvas" style="position: absolute; display: block; background-color:rgba(255, 255, 255, 1.00);"></canvas>
			<div id="dom_overlay_container" style="pointer-events:none; overflow:hidden; position: absolute; left: 0px; top: 0px; display: block;">
			</div>
		</div>
		<script>init();</script>
		<div style="display:none;" id="responseJSON"></div>
	</div>
`;
var canvasContentscript = `
	<script>
		var canvas, stage, exportRoot, anim_container, dom_overlay_container, fnStartAnimation;
		function init() {
			//exportRoot = new lib.MCTemplate();
			stage = new createjs.Stage(canvas);
			//stage.addChild(exportRoot);	
			
			anim_container = document.getElementById("animation_container");
			dom_overlay_container = document.getElementById("dom_overlay_container");
			handleComplete();
		}
		function handleComplete() {
			//This function is always called, irrespective of the content. You can use the variable "stage" after it is created in token create_stage.
			stage = new createjs.Stage(canvas);
			stage.enableMouseOver();	
			//Registers the "tick" event listener.
			fnStartAnimation = function() {
				createjs.Ticker.setFPS(lib.properties.fps);
				createjs.Ticker.addEventListener("tick", stage);
			}	    
			//Code to support hidpi screens and responsive scaling.
			function makeResponsive(isResp, respDim, isScale, scaleType) {		
				var lastW, lastH, lastS=1;		
				window.addEventListener('resize', resizeCanvas);		
				resizeCanvas();		
				function resizeCanvas() {			
					var w = lib.properties.width, h = lib.properties.height;			
					var iw = window.innerWidth, ih=window.innerHeight;			
					var pRatio = window.devicePixelRatio || 1, xRatio=iw/w, yRatio=ih/h, sRatio=1;			
					if(isResp) {                
						if((respDim=='width'&&lastW==iw) || (respDim=='height'&&lastH==ih)) {                    
							sRatio = lastS;                
						}				
						else if(!isScale) {					
							if(iw<w || ih<h)						
								sRatio = Math.min(xRatio, yRatio);				
						}				
						else if(scaleType==1) {					
							sRatio = Math.min(xRatio, yRatio);				
						}				
						else if(scaleType==2) {					
							sRatio = Math.max(xRatio, yRatio);				
						}			
					}			
					canvas.width = w*pRatio*sRatio;			
					canvas.height = h*pRatio*sRatio;
					canvas.style.width = dom_overlay_container.style.width = anim_container.style.width =  w*sRatio+'px';				
					canvas.style.height = anim_container.style.height = dom_overlay_container.style.height = h*sRatio+'px';
					stage.scaleX = pRatio*sRatio;			
					stage.scaleY = pRatio*sRatio;			
					lastW = iw; lastH = ih; lastS = sRatio;		
				}
			}
			makeResponsive(true,'both',false,2);	
			fnStartAnimation();
		}
	</script>
`;

var MovieClipTemplate = `(lib.MCTemplate = function(mode,startPosition,loop) {
	this.initialize(mode,startPosition,loop,{});
}).prototype = p = new cjs.MovieClip();
p.nominalBounds = new cjs.Rectangle(0,0,640,480);
`;

var animationCodeTemplateCode = fs.readFileSync(__dirname + '/' + pArgs[pArgs.indexOf('animationCodeTemplate')+1], 'utf8', {});

var models = pArgs[pArgs.indexOf('models')+1];
var models = models.split(",");

for (var i = 1; i <= 1; i++) {

	var mcTemplateAST = esprima.parse(MovieClipTemplate);
	var drawModelsCode = ``;
	var drawModelsTweenCode = `this.timeline.addTween(cjs.Tween.get({}).to({state:[]})`;

	for (var j = 0 ; j < i ; j++) {
		var randomIndexForModels = getRandomInt(1,models.length) - 1;
		var model = fs.readFileSync(pArgs[pArgs.indexOf('ModelsDirectory')+1] + '/' + models[randomIndexForModels], 'utf8', {});
		var modelAST = esprima.parse(model);
		
		drawModelsCode = drawModelsCode + `
			this.instance` + j + ` = new lib.` + modelAST.body[0].expression.right.arguments[0].property.name + `();
			this.instance` + j + `.parent = this;
		`;	
	}

	for (var j = 0 ; j < i ; j++) {
		var nextTween = `.to({state:[{t:this.instance` + j + `,p:{x:74.4,y:89.9}}]},9)`;			
		if (j == i - 1) {
			drawModelsTweenCode = drawModelsTweenCode + nextTween + `);`; 
		} else {
			drawModelsTweenCode = drawModelsTweenCode + nextTween;
		}
	}

	var drawModelsTweenCodeAST = esprima.parse(drawModelsTweenCode);
	var drawModelsCodeAST = esprima.parse(drawModelsCode);

	var animationCodeTemplateAST = esprima.parse(animationCodeTemplateCode);
	estraverse.traverse(animationCodeTemplateAST, {
	    enter: function (node, parent) {
	    	if (
	    		node.type === 'BlockStatement' &&
	    		node.body[3] &&	node.body[3].id && node.body[3].id.name === 'getMCSymbolPrototype'
	    	) {
	    		
	   //  		console.log('---');
	   //  		// 4 because getMCSymbolPrototype() is the 4th instruction of the index.js template
	   //  		node.body.splice(4, 0, modelAST.body[0]);

				// mcTemplateAST.body[0].expression.left.object.right.body.body
				// 	.splice.apply(
				// 		mcTemplateAST.body[0].expression.left.object.right.body.body,
				// 		[mcTemplateAST.body[0].expression.left.object.right.body.body.length, drawModelsCodeAST.body.length]
				// 	.concat(drawModelsCodeAST.body) //,drawModelsTweenCodeAST.body						
				// );

				//node.body.splice.apply(node.body, [node.body.length - 1, mcTemplateAST.body.length].concat(mcTemplateAST.body));

	    	}
	    },
	    leave: function (node, parent) {
	    }
	});

	var animationFunctionality = `<script>` + escodegen.generate(animationCodeTemplateAST) + `</script>`;
	var FINALdocTEST = openingHTMLtag + 
	    					openingHeadtag + 
	    						styles +
	    						jqueryJSscript +
	    						createJSscript +
	    						canvasContentscript +
	    						animationFunctionality +
	    					closingHeadtag +
	    					openingBodytag +
	    						animationStageHTML +
	    					closingBodytag +
	    			   closingHTMLtag;

	var folder = path.basename(pArgs[pArgs.indexOf('outputFilenameTest') + 1],'.html');
	if (!fs.existsSync(__dirname + '/' + pArgs[pArgs.indexOf('outputDir')+1])) {
		fs.mkdirSync(__dirname + '/' + pArgs[pArgs.indexOf('outputDir')+1]);
	}
	if (!fs.existsSync(__dirname + '/' + pArgs[pArgs.indexOf('outputDir')+1] + '/' + folder + i)) {
		fs.mkdirSync(__dirname + '/' + pArgs[pArgs.indexOf('outputDir')+1] + '/' + folder + i);
	}

	fs.writeFileSync(__dirname + '/' + pArgs[pArgs.indexOf('outputDir')+1] + '/' + folder + i + '/' + pArgs[pArgs.indexOf('outputFilenameTest')+1],
	    FINALdocTEST
	    , {}
	);

}